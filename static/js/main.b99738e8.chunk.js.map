{"version":3,"sources":["BooksAPI.js","components/Bookshelf.js","components/BookList.js","components/SearchBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","books","Bookshelf","this","props","bookshelfType","bookshelfTitle","className","filter","book","shelf","map","key","id","style","width","height","backgroundImage","imageLinks","thumbnail","value","onChange","event","updateShelf","target","disabled","title","author","Component","BookList","to","SearchBooks","type","placeholder","App","state","searchedBooks","query","getBookOnNewShelf","bind","onUpdateShelf","BooksAPI","setState","method","body","JSON","stringify","trim","results","console","log","mappedOverBooks","result","forEach","catch","exact","path","render","onBookSearch","React","ReactDOM","document","getElementById"],"mappings":"8RACMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACd,OAAU,mBACV,cAAiBN,GAQNO,EAAS,kBACpBC,MAAM,GAAD,OAAIT,EAAJ,UAAiB,CAAEO,YACrBG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,U,sBCkBRC,E,iLArCD,IAAD,SAC4CC,KAAKC,MAA9CC,EADH,EACGA,cAAeJ,EADlB,EACkBA,MAAOK,EADzB,EACyBA,eAE9B,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,mBAAmBD,GACjC,yBAAKC,UAAU,mBACX,wBAAIA,UAAU,cACTN,EAAMO,QAAO,SAACC,GAAD,OAAWA,EAAKC,QAAUL,KAAgBM,KAAI,SAACF,GAAD,OACxD,wBAAIG,IAAKH,EAAKI,IACV,yBAAKN,UAAU,QACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aAAaO,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAgB,OAAD,OAASR,EAAKS,WAAaT,EAAKS,WAAWC,UAAY,GAAvD,QAC7E,yBAAKZ,UAAU,sBACX,4BACIa,MAAOX,EAAKC,MACZW,SAAU,SAACC,GAAD,OAAW,EAAKlB,MAAMmB,YAAYd,EAAMa,EAAME,OAAOJ,SAC/D,4BAAQA,MAAM,OAAOK,UAAQ,GAA7B,cACA,4BAAQL,MAAM,oBAAd,qBACA,4BAAQA,MAAM,cAAd,gBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,WAIZ,yBAAKb,UAAU,cAAcE,EAAKiB,OAClC,yBAAKnB,UAAU,gBAAgBE,EAAKkB,oB,GA3BhDC,aCwCTC,E,iLAnCP,OACI,yBAAKtB,UAAU,cACX,yBAAKA,UAAU,oBACX,wCAEJ,yBAAKA,UAAU,sBACX,kBAAC,EAAD,CACID,eAAgB,oBAChBD,cAAe,mBACfJ,MAAOE,KAAKC,MAAMH,MAClBsB,YAAapB,KAAKC,MAAMmB,cAE5B,kBAAC,EAAD,CACIjB,eAAgB,eAChBD,cAAe,aACfJ,MAAOE,KAAKC,MAAMH,MAClBsB,YAAapB,KAAKC,MAAMmB,cAE5B,kBAAC,EAAD,CACIjB,eAAgB,OAChBD,cAAe,OACfJ,MAAOE,KAAKC,MAAMH,MAClBsB,YAAapB,KAAKC,MAAMmB,eAGhC,yBAAKhB,UAAU,eACX,kBAAC,IAAD,CAAMuB,GAAG,WAAT,oB,GA7BGF,aC4BRG,E,iLA3BD,IACE9B,EAAUE,KAAKC,MAAfH,MAER,OACI,yBAAKM,UAAU,gBACX,yBAAKA,UAAU,oBACX,kBAAC,IAAD,CAAMA,UAAU,eAAeuB,GAAG,KAAlC,SACA,yBAAKvB,UAAU,8BACX,2BACIyB,KAAK,OACLC,YAAY,4BACZZ,SAAUlB,KAAKC,MAAMiB,WAEzB,wBAAId,UAAU,cACV,kBAAC,EAAD,CACID,eAAgB,iBAChBL,MAAOA,EACPsB,YAAapB,KAAKC,MAAMmB,sB,GAlB9BK,aCkGXM,E,YA9Fb,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KACD+B,MAAQ,CACXlC,MAAO,GACPmC,cAAe,GACfC,MAAO,IAGT,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBATJ,E,iFAYE,IAAD,OAClBE,IACG5C,MAAK,SAACI,GACL,EAAKyC,SAAS,CACZzC,MAAOA,S,mCAMFqB,GAAQ,IAAD,OACZe,EAAQf,EAAME,OAAOJ,MAGb,KAAViB,EACFlC,KAAKuC,SAAS,CACZN,cAAe,KAEE,KAAVC,GJJO,SAACA,GAAD,OACpBzC,MAAM,GAAD,OAAIT,EAAJ,WAAkB,CACrBwD,OAAQ,OACRjD,QAAQ,eACHA,EADE,CAEL,eAAgB,qBAElBkD,KAAMC,KAAKC,UAAU,CAAET,YACtBxC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,SIJjBwC,CAAgBJ,EAAMU,QACnBlD,MAAK,SAAAmD,GACJC,QAAQC,IAAIF,GACZ,IAAMG,EAAkBH,EACrBrC,KAAI,SAAAyC,GAMH,OALA,EAAKjB,MAAMlC,MAAMoD,SAAQ,SAAA5C,GACnB2C,EAAOvC,KAAOJ,EAAKI,KACrBuC,EAAO1C,MAAQD,EAAKC,UAGjB0C,KAGX,EAAKV,SAAS,CAAEN,cAAee,OAEhCG,OAAM,WAEL,EAAKZ,SAAS,CACZN,cAAe,U,oCAOX3B,EAAMC,GAAQ,IAAD,QJxCP,SAACD,EAAMC,GAAP,OACpBd,MAAM,GAAD,OAAIT,EAAJ,kBAAiBsB,EAAKI,IAAM,CAC/B8B,OAAQ,MACRjD,QAAQ,eACHA,EADE,CAEL,eAAgB,qBAElBkD,KAAMC,KAAKC,UAAU,CAAEpC,YACtBb,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WIiCjB0C,CAAgBhC,EAAMC,GACnBb,MAAK,WACJoD,QAAQC,IAAI,UACZ,EAAKZ,yB,0CAIU,IAAD,OAClBG,IACG5C,MAAK,SAACI,GACL,EAAKyC,SAAS,CACZzC,MAAOA,S,+BAKL,IAAD,OACP,OACE,6BACE,kBAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAC5B,kBAAC,EAAD,CACElC,YAAa,EAAKiB,cAClBvC,MAAO,EAAKkC,MAAMlC,WAGtB,kBAAC,IAAD,CAAOuD,KAAK,UAAUC,OAAQ,kBAC5B,kBAAC,EAAD,CACEpC,SAAU,SAACC,GAAD,OAAW,EAAKoC,aAAapC,IACvCrB,MAAO,EAAKkC,MAAMC,cAClBb,YAAa,EAAKiB,wB,GAvFZmB,IAAM/B,W,MCDxBgC,IAASH,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OACcI,SAASC,eAAe,W","file":"static/js/main.b99738e8.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react';\n\nclass Bookshelf extends Component {\n    render() {\n        const { bookshelfType, books, bookshelfTitle } = this.props;\n\n        return (\n            <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">{bookshelfTitle}</h2>\n                <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n                        {books.filter((book) => (book.shelf === bookshelfType)).map((book) =>\n                            <li key={book.id}>\n                                <div className=\"book\">\n                                    <div className=\"book-top\">\n                                        <div className=\"book-cover\" style={{ width: 128, height: 192, backgroundImage: `url(${book.imageLinks ? book.imageLinks.thumbnail : ''})` }}></div>\n                                        <div className=\"book-shelf-changer\">\n                                            <select\n                                                value={book.shelf}\n                                                onChange={(event) => this.props.updateShelf(book, event.target.value)}>\n                                                <option value=\"move\" disabled>Move to...</option>\n                                                <option value=\"currentlyReading\">Currently Reading</option>\n                                                <option value=\"wantToRead\">Want to Read</option>\n                                                <option value=\"read\">Read</option>\n                                                <option value=\"none\">None</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div className=\"book-title\">{book.title}</div>\n                                    <div className=\"book-authors\">{book.author}</div>\n                                </div>\n                            </li>\n                        )}\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Bookshelf;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Bookshelf from './Bookshelf';\n\nclass BookList extends Component {\n\n    render() {\n        return (\n            <div className=\"list-books\">\n                <div className=\"list-books-title\">\n                    <h1>MyReads</h1>\n                </div>\n                <div className=\"list-books-content\">\n                    <Bookshelf\n                        bookshelfTitle={'Currently Reading'}\n                        bookshelfType={'currentlyReading'}\n                        books={this.props.books}\n                        updateShelf={this.props.updateShelf}\n                    />\n                    <Bookshelf\n                        bookshelfTitle={'Want to read'}\n                        bookshelfType={'wantToRead'}\n                        books={this.props.books}\n                        updateShelf={this.props.updateShelf}\n                    />\n                    <Bookshelf\n                        bookshelfTitle={'Read'}\n                        bookshelfType={'read'}\n                        books={this.props.books}\n                        updateShelf={this.props.updateShelf}\n                    />\n                </div>\n                <div className=\"open-search\">\n                    <Link to=\"/search\">\n                        Add a book\n                    </Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BookList;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Bookshelf from './Bookshelf';\n\nclass SearchBooks extends Component {\n    render() {\n        const { books } = this.props;\n\n        return (\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link className=\"close-search\" to=\"/\">Close</Link>\n                    <div className=\"search-books-input-wrapper\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search by title or author\"\n                            onChange={this.props.onChange}\n                        />\n                        <ol className=\"books-grid\">\n                            <Bookshelf\n                                bookshelfTitle={'Search Results'}\n                                books={books}\n                                updateShelf={this.props.updateShelf}\n                            />\n                        </ol>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBooks;","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport BookList from './components/BookList';\nimport SearchBooks from './components/SearchBooks';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      searchedBooks: [],\n      query: '',\n    }\n\n    this.getBookOnNewShelf = this.getBookOnNewShelf.bind(this);\n    this.onUpdateShelf = this.onUpdateShelf.bind(this);\n  }\n\n  componentDidMount() {\n    BooksAPI.getAll()\n      .then((books) => {\n        this.setState({\n          books: books\n        })\n      })\n  }\n\n  // the SEARCH part\n  onBookSearch(event) {\n    const query = event.target.value;\n\n    // if query is not empty, calling API \n    if (query === '') {\n      this.setState({\n        searchedBooks: []\n      })\n    } else if (query !== '') {\n      BooksAPI.search(query.trim())\n        .then(results => {\n          console.log(results);\n          const mappedOverBooks = results\n            .map(result => {\n              this.state.books.forEach(book => {\n                if (result.id === book.id) {\n                  result.shelf = book.shelf;\n                }\n              })\n              return result;\n            })\n\n          this.setState({ searchedBooks: mappedOverBooks });\n        })\n        .catch(() => {\n          // in case of an error, setting state to empty array\n          this.setState({\n            searchedBooks: []\n          })\n        })\n    }\n  }\n\n  // the UPDATE part\n  onUpdateShelf(book, shelf) {\n    BooksAPI.update(book, shelf)\n      .then(() => {\n        console.log('update');\n        this.getBookOnNewShelf();\n      })\n  }\n\n  getBookOnNewShelf() {\n    BooksAPI.getAll()\n      .then((books) => {\n        this.setState({\n          books: books\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <Route exact path='/' render={() => (\n          <BookList\n            updateShelf={this.onUpdateShelf}\n            books={this.state.books}\n          />\n        )} />\n        <Route path='/search' render={() => (\n          <SearchBooks\n            onChange={(event) => this.onBookSearch(event)}\n            books={this.state.searchedBooks}\n            updateShelf={this.onUpdateShelf}\n          />\n        )} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}